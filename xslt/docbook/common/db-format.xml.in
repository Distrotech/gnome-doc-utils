<?xml version='1.0' encoding='utf-8'?><!-- -*- indent-tabs-mode: nil -*- -->
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:msg="http://www.gnome.org/~shaunm/gnome-doc-utils/xsl-format"
                xmlns:_msg="http://www.gnome.org/~shaunm/gnome-doc-utils/xsl-format">

<title xmlns="http://www.gnome.org/~shaunm/xsldoc">Format Templates</title>


<!-- == format.citetitle =================================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.citetitle</name>
  <purpose>
    Format a <xmltag>citetitle</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <sgmltag>citetitle</sgmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label, extracted from the
      <sgmltag class="attribute">pubwork</sgmltag> attribute
    </purpose>
  </parameter>
  <description>
    <para>This template used for formatting the <sgmltag>citetitle</sgmltag>
    element in DocBook.  The <sgmltag>citetitle</sgmltag> element has a
    <sgmltag class="attribute">pubwork</sgmltag> attribute that can be set
    to one of the following values:
    <literal>article</literal>,      <literal>bbs</literal>,
    <literal>book</literal>,         <literal>cdrom</literal>,
    <literal>chapter</literal>,      <literal>dvd</literal>,
    <literal>emailmessage</literal>, <literal>gopher</literal>,
    <literal>journal</literal>,      <literal>manuscript</literal>,
    <literal>newsposting</literal>,  <literal>part</literal>,
    <literal>refentry</literal>,     <literal>section</literal>,
    <literal>series</literal>,       <literal>set</literal>,
    <literal>webpage</literal>,      <literal>wiki</literal>.
    This template allows multiple role format strings, using the value of
    <sgmltag class="attribute">pubwork</sgmltag> as the role.  Translators
    can use this to customize the appearance of a cited title based on the
    type of document being cited.  The default formatting is as follows:</para>
    <programlisting><![CDATA[
<msg:msgstr role="article">“%t{node}”</msg:msgstr>
<msg:msgstr><i>%t{node}</i></msg:msgstr>]]></programlisting>
    <para>This puts the title of an article citation in quotes.  For all other
    types of works, the title is simply italicized.</para>
  </description>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>node</parameter></term>
        <listitem><para>A template argument which processes the contents of
        the <sgmltag>citetitle</sgmltag> element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.citetitle">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.citetitle">
    <!--
    citetitle - The title of a cited work
    http://docbook.org/tdg/en/html/citetitle.html

    This template formats an inline title citation.  This template uses
    roles to specify the type of publication being cited, such as article
    or book.

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.citetitle
    -->
    <_msg:msgstr>format.citetitle</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="article">“%t{node}”</msg:msgstr>
      <msg:msgstr><i>%t{node}</i></msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="node">
    <xsl:apply-templates select="$node/node()"/>
  </msg:arg>
</xsl:template>


<!-- == format.date ======================================================== -->
<!--
<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.date</name>
  <purpose>
    Format a date
  </purpose>
  <parameter>
    <node>year</node>
    <purpose>
      The year in the Gregorian calendar
    </purpose>
  </parameter>
  <parameter>
    <name>month</name>
    <purpose>
      The number of the month
    </purpose>
  </parameter>
  <parameter>
    <name>day</name>
    <purpose>
      The number of the day in the month
    </purpose>
  </parameter>
</template>

<xsl:template name="format.date">
  <xsl:param name="year"/>
  <xsl:param name="month"/>
  <xsl:param name="day"/>
  <msg:msg id="format.date">
    <_msg:msgstr>format.date</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <xsl:template>
        <xsl:choose>
          <xsl:when test="$month =  1"><xsl:text>January </xsl:text></xsl:when>
          <xsl:when test="$month =  2"><xsl:text>February </xsl:text></xsl:when>
          <xsl:when test="$month =  3"><xsl:text>March </xsl:text></xsl:when>
          <xsl:when test="$month =  4"><xsl:text>April </xsl:text></xsl:when>
          <xsl:when test="$month =  5"><xsl:text>May </xsl:text></xsl:when>
          <xsl:when test="$month =  6"><xsl:text>June </xsl:text></xsl:when>
          <xsl:when test="$month =  7"><xsl:text>July </xsl:text></xsl:when>
          <xsl:when test="$month =  8"><xsl:text>August </xsl:text></xsl:when>
          <xsl:when test="$month =  9"><xsl:text>September </xsl:text></xsl:when>
          <xsl:when test="$month = 10"><xsl:text>October </xsl:text></xsl:when>
          <xsl:when test="$month = 11"><xsl:text>November </xsl:text></xsl:when>
          <xsl:when test="$month = 12"><xsl:text>December </xsl:text></xsl:when>
        </xsl:choose>
        <xsl:value-of select="$day"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="$year"/>
      </xsl:template>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="year">
    <xsl:value-of select="$year"/>
  </msg:arg>
  <msg:arg name="month">
    <xsl:value-of select="$month"/>
  </msg:arg>
  <msg:arg name="day">
    <xsl:value-of select="$day"/>
  </msg:arg>
</xsl:template>
-->


<!-- == format.quote.outer ================================================= -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.quote.outer</name>
  <purpose>
    Format a <xmltag>quote</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>quote</xmltag> element to format
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>node</parameter></term>
        <listitem><para>A template argument which processes the contents of
        the <sgmltag>quote</sgmltag> element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.quote.outer">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.quote.outer">
    <!-- 
    quote - An inline quotation
    http://docbook.org/tdg/en/html/quote.html

    This template formats an inline quotation.  The default
    rendering in the C locale is this: “%t{node}”

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.quote.outer
    -->
    <_msg:msgstr>format.quote.outer</_msg:msgstr>
    <msg:msgstr xml:lang="C">“%t{node}”</msg:msgstr>
  </msg:msg>
  <msg:arg name="node">
    <xsl:apply-templates select="$node/node()"/>
  </msg:arg>
</xsl:template>


<!-- == format.quote.inner ================================================= -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.quote.inner</name>
  <purpose>
    Format a nested <xmltag>quote</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>quote</xmltag> element to format
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>node</parameter></term>
        <listitem><para>A template argument which processes the contents of
        the <sgmltag>quote</sgmltag> element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.quote.inner">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.quote.inner">
    <!-- 
    quote - An inline quotation
    http://docbook.org/tdg/en/html/quote.html

    This template formats a nested inline quotation.  The default
    rendering in the C locale is this: ‘%t{node}’

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.quote.inner
    -->
    <_msg:msgstr>format.quote.inner</_msg:msgstr>
    <msg:msgstr xml:lang="C">‘%t{node}’</msg:msgstr>
  </msg:msg>
  <msg:arg name="node">
    <xsl:apply-templates select="$node/node()"/>
  </msg:arg>
</xsl:template>


<!-- == format.appendix.label ============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.appendix.label</name>
  <purpose>
    Format the label for a <xmltag>appendix</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>appendix</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.appendix.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.appendix.label">
    <!--
    appendix - An appendix in a book or article
    http://docbook.org/tdg/en/html/appendix.html

    This template formats the label of an appendix.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Appendix %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.appendix.label
    -->
    <_msg:msgstr>format.appendix.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header">%t{number}.&#x2003;</msg:msgstr>
      <msg:msgstr role="li">%t{number}.&#x2002;</msg:msgstr>
      <msg:msgstr role="xref">Appendix %t{number} ― %t{title}</msg:msgstr>
      <msg:msgstr>Appendix %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.book.label ================================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.book.label</name>
  <purpose>
    Format the label for a <sgmltag>book</sgmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <sgmltag>book</sgmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>titleabbrev</parameter></term>
        <listitem><para>A template argument which extracts the abbreviated
        title of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.book.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.book.label">
    <!--
    book - A book
    http://docbook.org/tdg/en/html/book.html

    This template formats the label of a book.  This tmeplate uses roles
    to mark different uses of the label.  Books are never numbered by
    the stylesheets, so only the 'title' and 'titleabbrev' roles are
    necessary.  Since both of these are automatically constructed by
    format2xsl, translators usually will not need to provide mutliple
    role translations, unless they need additional cross reference
    roles for their locale.

    A simple rendering might look like this: %t{title}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.book.label
    -->
    <_msg:msgstr>format.book.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">%t{title}</msg:msgstr>
  </msg:msg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="titleabbrev">
    <xsl:call-template name="db.titleabbrev">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.chapter.label =============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.chapter.label</name>
  <purpose>
    Format the label for a <xmltag>chapter</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>chapter</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.chapter.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.chapter.label">
    <!--
    chapter - A chapter, as of a book
    http://docbook.org/tdg/en/html/chapter.html

    This template formats the label of a chapter.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Chapter %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.chapter.label
    -->
    <_msg:msgstr>format.chapter.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header">%t{number}.&#x2003;</msg:msgstr>
      <msg:msgstr role="li">%t{number}.&#x2002;</msg:msgstr>
      <msg:msgstr role="xref">Chapter %t{number} ― %t{title}</msg:msgstr>
      <msg:msgstr>Chapter %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.example.label =============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.example.label</name>
  <purpose>
    Format the label for a <xmltag>example</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>example</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.example.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.example.label">
    <!--
    example - A formal example, with a title
    http://docbook.org/tdg/en/html/example.html

    This template formats the label of an example.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Example %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.example.label
    -->
    <_msg:msgstr>format.example.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header"><i>Example %t{number}</i>&#x2003;</msg:msgstr>
      <msg:msgstr>Example %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.figure.label ================================================ -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.figure.label</name>
  <purpose>
    Format the label for a <xmltag>figure</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>figure</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.figure.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.figure.label">
    <!--
    figure - A formal figure, generally an illustration, with a title
    http://docbook.org/tdg/en/html/figure.html

    This template formats the label of a figure.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Figure %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.figure.label
    -->
    <_msg:msgstr>format.figure.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header"><i>Figure %t{number}</i>&#x2003;</msg:msgstr>
      <msg:msgstr>Figure %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.manvolnum =================================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.manvolnum</name>
  <purpose>
    Format a <xmltag>manvolnum</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>manvolnum</xmltag> element to format
    </purpose>
  </parameter>
</template>

<xsl:template name="format.manvolnum">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.manvolnum">
    <!--
    manvolnum - A reference volume number
    http://docbook.org/tdg/en/html/manvolnum.html

    This template formats the manvolnum element.  A manvolnum is typically
    a number or short string used to identify a sectionof man pages.  It
    is typically placed inside parenthesis, like so: (%t{node})

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.manvolnum
    -->
    <_msg:msgstr>format.manvolnum</_msg:msgstr>
    <msg:msgstr xml:lang="C">(%t{node})</msg:msgstr>
  </msg:msg>
  <msg:arg name="node">
    <xsl:apply-templates select="$node/node()"/>
  </msg:arg>
</xsl:template>


<!-- == format.part.label ================================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.part.label</name>
  <purpose>
    Format the label for a <xmltag>part</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>part</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.part.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.chapter.label">
    <!--
    part - A division in a book
    http://docbook.org/tdg/en/html/part.html

    This template formats the label of a part.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Part %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.part.label
    -->
    <_msg:msgstr>format.part.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header">%t{number}.&#x2003;</msg:msgstr>
      <msg:msgstr role="li">%t{number}.&#x2002;</msg:msgstr>
      <msg:msgstr role="xref">Part %t{number} ― %t{title}</msg:msgstr>
      <msg:msgstr>Part %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.refentry.label ============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.refentry.label</name>
  <purpose>
    Format the label for a <xmltag>refentry</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>refentry</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.refentry.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.refentry.label">
    <!--
    refentry - A reference page (originally a UNIX man-style reference page)
    http://docbook.org/tdg/en/html/refentry.html

    This template formats the label of a refentry.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: %t{title}

    Note that unlike most other labelled elements, refentry is not numbered
    by the stylesheets.  Consequently, the number argument is not supported.

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.refentry.label
    -->
    <_msg:msgstr>format.refentry.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="xref">%t{title}</msg:msgstr>
      <msg:msgstr>%t{title}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.section.label =============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.section.label</name>
  <purpose>
    Format the label for a <xmltag>section</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>section</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.section.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.section.label">
    <!--
    http://docbook.org/tdg/en/html/section.html
    http://docbook.org/tdg/en/html/sect1.html
    http://docbook.org/tdg/en/html/sect2.html
    http://docbook.org/tdg/en/html/sect3.html
    http://docbook.org/tdg/en/html/sect4.html
    http://docbook.org/tdg/en/html/sect5.html
    http://docbook.org/tdg/en/html/refsection.html
    http://docbook.org/tdg/en/html/refsect1.html
    http://docbook.org/tdg/en/html/refsect2.html
    http://docbook.org/tdg/en/html/refsect3.html

    This template formats the label of a section.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Section %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.section.label
    -->
    <_msg:msgstr>format.section.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header">%t{number}.&#x2003;</msg:msgstr>
      <msg:msgstr role="li">%t{number}.&#x2002;</msg:msgstr>
      <msg:msgstr role="xref">Section %t{number} ― %t{title}</msg:msgstr>
      <msg:msgstr>Section %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.table.label ================================================= -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.table.label</name>
  <purpose>
    Format the label for a <xmltag>table</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>table</xmltag> element to format
    </purpose>
  </parameter>
  <parameter>
    <name>role</name>
    <purpose>
      The role of the label
    </purpose>
  </parameter>
  <section>
    <title>Arguments</title>
    <para>This is a format template constructed by
    <function role='xsl-template' moreinfo='refentry'>format2xsl</function>.
    The following arguments are available for translators:</para>
    <variablelist>
      <varlistentry>
        <term><parameter>number</parameter></term>
        <listitem><para>A template argument which extracts the number
        portion of the label.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>title</parameter></term>
        <listitem><para>A template argument which extracts the title
        of the element.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
</template>

<xsl:template name="format.table.label">
  <xsl:param name="node" select="."/>
  <xsl:param name="role"/>
  <msg:msg id="format.table.label">
    <!--
    table - A formal table in a document
    http://docbook.org/tdg/en/html/table.html

    This template formats the label of a table.  This tmeplate uses
    roles to mark different uses of the label.  The standard label roles
    ('header', 'li', and 'xref') should be defined, as well as any extra
    roles you would like supported for your locale.

    A simple rendering might look like this: Table %t{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.table.label
    -->
    <_msg:msgstr>format.table.label</_msg:msgstr>
    <msg:msgstr xml:lang="C">
      <msg:msgstr role="header"><i>Table %t{number}</i>&#x2003;</msg:msgstr>
      <msg:msgstr>Table %t{number}</msg:msgstr>
    </msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="title">
    <xsl:call-template name="db.title">
      <xsl:with-param name="node" select="$node"/>
    </xsl:call-template>
  </msg:arg>
</xsl:template>


<!-- == format.example.number ============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.example.number</name>
  <purpose>
    Format the number for a <xmltag>example</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.example.number">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.example.number">
    <!--
    example - A formal example, with a title
    http://docbook.org/tdg/en/html/example.html

    This template formats the number portion of the label for an example.
    The parent argument calls the number formatter for the enclosing
    chapter, and the number argument formats the number of the element
    itself.

    A simple rendering might look like this: %t{parent}-%1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.example.number
    -->
    <_msg:msgstr>format.example.number</_msg:msgstr>
    <msg:msgstr xml:lang="C">%t{parent}-%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="parent">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="
                      $node/ancestor::appendix |
                      $node/ancestor::chapter  "/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="number">
    <xsl:number level="any" count="example" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.example.number.flat ========================================= -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.example.number.flat</name>
  <purpose>
    Format the number for a <xmltag>example</xmltag> element in a flat document
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.example.number.flat">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.example.number.flat">
    <!--
    example - A formal example, with a title
    http://docbook.org/tdg/en/html/example.html

    This template formats the number portion of the label for an example
    inside an article.  In articles, formal block elements use a flat
    numbering scheme, rather than being numbered by chapter.

    A simple rendering might look like this: %1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.example.number.flat
    -->
    <_msg:msgstr>format.example.number.flat</_msg:msgstr>
    <msg:msgstr xml:lang="C">%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:number level="any" count="example" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.figure.number =============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.figure.number</name>
  <purpose>
    Format the number for a <xmltag>figure</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.figure.number">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.figure.number">
    <!--
    figure - A formal figure, generally an illustration, with a title
    http://docbook.org/tdg/en/html/figure.html

    This template formats the number portion of the label for a figure.
    The parent argument calls the number formatter for the enclosing
    chapter, and the number argument formats the number of the element
    itself.

    A simple rendering might look like this: %t{parent}-%1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.figure.number
    -->
    <_msg:msgstr>format.figure.number</_msg:msgstr>
    <msg:msgstr xml:lang="C">%t{parent}-%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="parent">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="
                      $node/ancestor::appendix |
                      $node/ancestor::chapter  "/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="number">
    <xsl:number level="any" count="figure" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.figure.number.flat ========================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.figure.number.flat</name>
  <purpose>
    Format the number for a <xmltag>figure</xmltag> element in a flat document
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.figure.number.flat">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.figure.number.flat">
    <!--
    figure - A formal figure, generally an illustration, with a title
    http://docbook.org/tdg/en/html/figure.html

    This template formats the number portion of the label for a figure
    inside an article.  In articles, formal block elements use a flat
    numbering scheme, rather than being numbered by chapter.

    A simple rendering might look like this: %1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.figure.number.flat
    -->
    <_msg:msgstr>format.figure.number.flat</_msg:msgstr>
    <msg:msgstr xml:lang="C">%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:number level="any" count="figure" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.part.number ================================================= -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.part.number</name>
  <purpose>
    Format the number for a <xmltag>part</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.part.number">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.part.number">
    <!--
    part - A division in a book
    http://docbook.org/tdg/en/html/part.html

    This template formats the number portion of the label for a part.
    A simple rendering might look like this: %I{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.part.number
    -->
    <_msg:msgstr>format.part.number</_msg:msgstr>
    <msg:msgstr xml:lang="C">%I{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:number value="count($node/preceding-sibling::part) + 1"/>
  </msg:arg>
</xsl:template>


<!-- == format.table.number ================================================ -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.table.number</name>
  <purpose>
    Format the number for a <xmltag>table</xmltag> element
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.table.number">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.table.number">
    <!--
    table - A formal table in a document
    http://docbook.org/tdg/en/html/table.html

    This template formats the number portion of the label for a table.
    The parent argument calls the number formatter for the enclosing
    chapter, and the number argument formats the number of the element
    itself.

    A simple rendering might look like this: %t{parent}-%1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.table.number
    -->
    <_msg:msgstr>format.table.number</_msg:msgstr>
    <msg:msgstr xml:lang="C">%t{parent}-%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="parent">
    <xsl:call-template name="db.label.number">
      <xsl:with-param name="node" select="
                      $node/ancestor::appendix |
                      $node/ancestor::chapter  "/>
    </xsl:call-template>
  </msg:arg>
  <msg:arg name="number">
    <xsl:number level="any" count="table" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.table.number.flat =========================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.table.number.flat</name>
  <purpose>
    Format the number for a <xmltag>table</xmltag> element in a flat document
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The element for which to generate a number
    </purpose>
  </parameter>
</template>

<xsl:template name="format.table.number.flat">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.table.number.flat">
    <!--
    table - A formal table in a document
    http://docbook.org/tdg/en/html/table.html

    This template formats the number portion of the label for a table
    inside an article.  In articles, formal block elements use a flat
    numbering scheme, rather than being numbered by chapter.

    A simple rendering might look like this: %1{number}

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.table.number.flat
    -->
    <_msg:msgstr>format.table.number.flat</_msg:msgstr>
    <msg:msgstr xml:lang="C">%1{number}</msg:msgstr>
  </msg:msg>
  <msg:arg name="number">
    <xsl:number level="any" count="table" from="chapter | appendix"/>
  </msg:arg>
</xsl:template>


<!-- == format.tooltip.glossentry ========================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.tooltip.glossentry</name>
  <purpose>
    Format the tooltip for a link to a <xmltag>glossentry</xmltag>
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The <xmltag>glossentry</xmltag> element
    </purpose>
  </parameter>
</template>

<xsl:template name="format.tooltip.glossentry">
  <xsl:param name="node" select="."/>
  <msg:msg id="format.tooltip.glossentry">
    <!--
    glossentry - An entry in a glossary or glosslist
    http://docbook.org/tdg/en/html/glossentry.html

    This template formats a tooltip for links to glossentry elements.
    The default rendering is: Read the definition for ‘%s{node}’

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.tooltip.glossentry
    -->
    <_msg:msgstr>format.tooltip.glossentry</_msg:msgstr>
    <msg:msgstr xml:lang="C">Read the definition for ‘%s{node}’</msg:msgstr>
  </msg:msg>
  <msg:arg name="node">
    <xsl:value-of select="normalize-space($node/glossterm)"/>
  </msg:arg>
</xsl:template>


<!-- == format.tooltip.mailto ============================================== -->

<template xmlns="http://www.gnome.org/~shaunm/xsldoc">
  <name>format.tooltip.mailto</name>
  <purpose>
    Format the tooltip for a link to a
    <systemitem role="protocol">mailto</systemitem> URI.
  </purpose>
  <parameter>
    <name>node</name>
    <purpose>
      The source node
    </purpose>
  </parameter>
  <parameter>
    <name>address</name>
    <purpose>
      The email address
    </purpose>
  </parameter>
</template>

<xsl:template name="format.tooltip.mailto">
  <xsl:param name="node"/>
  <xsl:param name="address"/>
  <msg:msg id="format.tooltip.mailto">
    <!--
    This template formats a tooltip for mailto: links.
    The default rendering is: Send email to ‘%s{address}’

    Read this: ghelp:gnome-doc-xslt#translating
    Then this: ghelp:gnome-doc-xslt#format.tooltip.mailto
    -->
    <_msg:msgstr>format.tooltip.mailto</_msg:msgstr>
    <msg:msgstr xml:lang="C">Send email to ‘%s{address}’</msg:msgstr>
  </msg:msg>
  <msg:arg name="address">
    <xsl:value-of select="normalize-space($address)"/>
  </msg:arg>
</xsl:template>

</xsl:stylesheet>
