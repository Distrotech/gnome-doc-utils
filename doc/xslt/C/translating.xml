<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY gettext_xsl "<filename>gettext.xsl</filename>">
<!ENTITY format2xsl_xsl "<filename>format2xsl.xsl</filename>">
<!ENTITY l10n_xml "<filename>l10n.xml</filename>">
<!ENTITY gettext
  "<function role='xsl-template' moreinfo='refentry'>gettext</function>">
<!ENTITY gettext_plural_form
  "<function role='xsl-template' moreinfo='refentry'>gettext.plural_form</function>">
<!ENTITY format2xsl
  "<function role='xsl-template' moreinfo='refentry'>format2xsl</function>">
]>

<section id="translating">
  <title>Translating the Stylesheets</title>
  <para>The GNOME documentation stylesheets use two different mechanisms for
  internationalization.  The simpler method is provided by &gettext_xsl;.
  This method reads in translated strings from a simple &l10n_xml; file, which
  is easily managed using PO files and <command>intltool</command>.  The other
  method is provided by &format2xsl_xsl;.  This method converts special format
  files to XSLT stylesheets at build time.  It is considerably more flexible
  than the &gettext_xsl; method, as it allows translators programmer-level
  control over the formatted output.</para>

  <para>Generally, &gettext; is used only for simple string lookups that require
  no special formatting.  However, since it tends to have better performance
  than &format2xsl;, it is preferred whenever possible.  If you are providing
  translations and find that a string marked for translation is insufficient
  for your locale, you should request to have that translation reworked using
  format strings.  Document processing is a much more difficult task for
  internationalization than most simple application translations in GNOME.
  The maintainers don't know all the nuances of document processing in every
  language, so the only way we can improve the internationalization support is
  with the help of the translators.</para>

  <section id="translating-gettext">
    <title>The &gettext; Method</title>
    <para>The GNOME documentation stylesheets provide an XSLT template called
    &gettext; which extracts localized values of strings from a localization
    file.  This file is easily translated with PO files using the XML mode of
    <command>intltool</command>.</para>
    <para>For instance, consider the string <wordasword>Caution</wordasword>,
    which is used as a heading for <sgmltag>caution</sgmltag> elements.  The
    stylesheets would call &gettext; to extract the translated value of this
    string for the document's language.  The &l10n_xml; file would have an
    entry similar to this:</para>

    <programlisting><![CDATA[
<msg xmlns=""http://www.gnome.org/~shaunm/gnome-doc-utils/xsl-format">
  <msgid>Caution</msgid>
  <msgstr>Caution</msgstr>
  <msgstr xml:lang="ca">Compte</msgstr>
  <msgstr xml:lang="cs">Upozornění</msgstr>
  <msgstr xml:lang="de">Warnung</msgstr>
  <msgstr xml:lang="es">Precaución</msgstr>
  <msgstr xml:lang="hu">Figyelem</msgstr>
  <msgstr xml:lang="nl">Let op</msgstr>
  <msgstr xml:lang="pt">Cuidado</msgstr>
  <msgstr xml:lang="sq">Kujdes</msgstr>
  <msgstr xml:lang="sv">Varning</msgstr>
  <msgstr xml:lang="uk">Застереження</msgstr>
  <msgstr xml:lang="wa">Adviertance</msgstr>
</msg>]]></programlisting>

    <para>A translator, however, will work only with the PO files.  Using
    PO files for these strings is no different than any other simple string
    translation.  The PO entry in the <literal>cs</literal> locale for the
    above string would look like this:</para>

    <programlisting><![CDATA[
#: xslt/gettext/l10n.xml.in.h:63
msgid "Warning"
msgstr "Varování"]]></programlisting>

    <para>The &gettext; template also allows pluralized translations.  However,
    the standard multiple message strings used in PO files are not used for the
    pluralized translations, because <command>intltool</command> can't merge
    these into an XML file.  Instead, the translated message string is an XML
    fragment.  This is copied into the localization XML file, and &gettext;
    extracts the value for the appropriate plural form.</para>

    <para>After merging values from the PO files, the localization file will
    have entries similar to this:</para>

    <programlisting><![CDATA[
<msg xmlns=""http://www.gnome.org/~shaunm/gnome-doc-utils/xsl-format">
  <msgid>Author</msgid>
  <msgstr>
    <msgstr form="0">Author</msgstr>
    <msgstr form="1">Authors</msgstr>
  </msgstr>
  <msgstr xml:lang="cs">
    <msgstr form="0">Autor</msgstr>
    <msgstr form="1">Autoři</msgstr>
    <msgstr form="2">Autoři</msgstr>
  </msgstr>
</msg>]]></programlisting>

    <para>As with the simple case, each locale has a <sgmltag>msgstr</sgmltag>
    element with an <sgmltag class="attribute">xml:lang</sgmltag> attribute.
    For pluralized translations, however, the translation is a sequence of
    nested <sgmltag>msgstr</sgmltag> elements, each with a
    <sgmltag class="attribute">form</sgmltag> attribute.  The &gettext; tamplate
    extracts the correct string based on the plural form, which is computed from
    the number of referenced objects.</para>

    <para>Translators simply write the correct XML fragment in the translated
    message string.  For example, here is the PO file entry in the
    <literal>cs</literal> locale for the above:</para>

    <programlisting><![CDATA[
#. Used as a header before a list of authors.
#: xslt/gettext/l10n.xml.in.h:2
msgid ""
"<msgstr form=\"0\">Author</msgstr>"
"<msgstr form=\"1\">Authors</msgstr>"
msgstr ""
"<msgstr form=\"0\">Autor</msgstr>"
"<msgstr form=\"1\">Autoři</msgstr>"
"<msgstr form=\"2\">Autoři</msgstr>"]]></programlisting>

    <para>Since <command>intltool</command> often alters whitespace, the
    entry in the PO file might not look as nice as this.  When creating the
    translated message strings, translators may add or remove whitespace
    between <sgmltag>msgstr</sgmltag> elements if they choose.  This extra
    text content is ignored by &gettext;.</para>

    <para>Note that translators may add a <sgmltag>msgstr</sgmltag> element
    without <sgmltag class="attribute">form</sgmltag> attribute as a fallback
    translation.  In the example above, the last two <sgmltag>msgstr</sgmltag>
    elements could have been replaced by a single <sgmltag>msgstr</sgmltag>
    element without a <sgmltag class="attribute">form</sgmltag> attribute.
    The &gettext; template would match the first element whenever the plural
    form is 0, and the fallback element otherwise.</para>

    <para>The plural form is determined by calling the &gettext_plural_form;
    template.  This template has the plural forms for locales hard-coded;
    they are not extracted automatically from PO files.  When translators
    begin translating the stylesheets, they should contact the maintainers
    to have an appropriate plural form added to the stylesheets.</para>
  </section>

  <section id="translating-format2xsl">
    <title>The &format2xsl; Method</title>
    <para/>
  </section>
</section>
